#!/usr/bin/env bash

# set -euo pipefail
# set -x

version="0.0.1"

star='\e[33m★\e[m'
left='\e[32m／\e[m'
right='\e[32m＼\e[m'
bottom='\e[32m^\e[m'
trunk='\e[31m| |\e[m'

_help() {
  echo "
$0 -- Show X'mas tree

Usage: $0 [options]

Options:
 -s, --size <POSITIVE SIZE>  game level (default=5)
 -n, --number <POSITIVE NUM> number of tree (default=1)
 -a, --animation             enable animation
 -i, --interval <NUM=1>      animation interval (default=1)
 -m, --monochrome            disable color
 -h, --help     display this help and exit
 -v, --version  output version infromation and exit

Version:
 $version"
}

_orand() {
  colors=(21 33 34 35 36 37)
  ornaments=(
    ' ' ' ' ' ' ' ' ' '
    ' ' ' ' ' ' ' ' ' '
    'i' '⸛' '⁂' '⸮' '&' '@' '｡'
  )
  echo -ne "\e[${colors[RANDOM % 6]}m${ornaments[RANDOM % 17]}\e[m"
}

_nchar() {
  local i
  if [ "$1" = 0 ]; then
    echo -n ""
  else
    for i in $(eval echo {1.."$1"}); do
      echo -ne "$2"
    done
  fi
}

_mktree() {
  local n i _
  n="$1"
  # header
  _nchar "$((n + 1))" " "
  echo -ne "$star"
  _nchar "$((n + 1))" " "
  echo

  # body
  for i in $(eval echo {1.."$n"}); do
    _nchar "$((n - i))" " "
    echo -ne "$left"
    e="$((i * 2 - 1))"
    for _ in $(eval echo {1.."$e"}); do
      _orand
    done

    echo -ne "$right"
    _nchar "$((n + 1 - i))" " "
    echo
  done

  # footer 1
  _nchar "$n" "$bottom"
  echo -ne "$trunk"
  _nchar "$n" "$bottom"
  echo

  # footer 2
  _nchar "$n" " "
  echo -ne "$trunk"
  echo
}

_print_tree() {
  eval paste "$(
    for i in $(eval echo {1.."$2"}); do
      echo -n "<(_mktree \"$1\") "
    done
  )"
}

main() {
  local size number animation interval monochrome
  size="5"
  number="1"
  animation="0"
  interval="1"
  monochrome="0"
  s="0"
  for arg in "${@}"; do
    if [ $s -gt 0 ]; then
      ((s--))
      continue
    fi
    case $arg in
      -h | --help)
        _help
        return 0
        ;;
      -v | --version)
        echo "$version"
        return 0
        ;;
      -s | --size)
        if [[ -z $2 ]] || [[ $2 =~ ^-+ ]] || [ "$2" -lt 1 ]; then
          echo "error: option '$1' requires positive int -- $2" >&2
          return 1
        fi
        size="$2"
        shift 2
        s=1
        ;;
      -n | --number)
        if [[ -z $2 ]] || ! [[ $2 =~ ^[0-9]+$ ]] || [ "$2" -lt 1 ]; then
          echo "error: option '$1' requires positive int -- $2" >&2
          return 1
        fi
        number="$2"
        shift 2
        s=1
        ;;
      -i | --interval)
        if [[ -z $2 ]] || ! [[ $2 =~ ^[0-9]+$ ]] || [ "$2" -lt 0 ]; then
          echo "error: option '$1' requires natural int -- $2" >&2
          return 1
        fi
        interval="$2"
        shift 2
        s=1
        ;;
      -a | --animation)
        animation="1"
        shift
        ;;
      -m | --monochrome)
        monochrome="1"
        shift
        ;;
      -*)
        echo "error: unknown option -- $1" >&2
        return 1
        ;;
      *)
        echo "error: extra argument -- '$arg'" >&2
        return 1
        ;;
    esac
  done
  if [ "$animation" = "1" ]; then
    while :; do
      if [ "$monochrome" = 1 ]; then
        _print_tree "$size" "$number" | sed 's/\x1b\[[0-9;]*m//g'
      else
        _print_tree "$size" "$number"
      fi
      sleep "$interval"s
      echo -ne "\\e[$((size + 3))A"
    done
  else
    if [ "$monochrome" = 1 ]; then
      _print_tree "$size" "$number" | sed 's/\x1b\[[0-9;]*m//g'
    else
      _print_tree "$size" "$number"
    fi
  fi
}

main "${@}"
exit $?
